<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.roc.mapper.ExperienceMapper">
    <resultMap id="BaseResultMap" type="Experience">
        <id column="experience_id" property="experienceId" jdbcType="INTEGER"/>
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="like_num" property="likeNum" jdbcType="INTEGER"/>
        <result column="unlike_num" property="unlikeNum" jdbcType="INTEGER"/>
        <result column="operate_status" property="operateStatus" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="image" property="image" jdbcType="VARCHAR"/>
    </resultMap>


    <insert id="insertPojo" parameterType="Experience">
        insert into experience(
        user_id,
        title,
        content,
        like_num,
        unlike_num,
        image
        ) values (
        #{userId},
        #{title},
        #{content},
        #{likeNum},
        #{unlikeNum},
        #{image}
        )
    </insert>

    <select id="getPojo" resultMap="BaseResultMap">
        select a.*,b.operate_type AS operate_status
        from experience a
        LEFT JOIN praise_or_disagree b
        ON (b.operate_object=#{operateObject}
        AND b.operate_target=a.experience_id AND b.target_type='0')
        where a.experience_id=#{id}
    </select>

    <select id="getAllList" resultType="com.roc.vo.ExperienceVo">
        SELECT * FROM
        (select
              e.experience_id as "commId",
              e.user_id as "userId",
              u.name,
              u.head_image as "headImage",
              e.image,
              e.title,
              e.content,
              e.like_num as "likeNum",
              e.unlike_num as "unlikeNum",
              b.operate_type AS operateStatus
              from experience e
              left join sys_user u
              on e.user_id=u.user_id
              LEFT JOIN praise_or_disagree b
              ON (b.operate_object=#{operateObject}
              AND b.operate_target=e.experience_id AND b.target_type='0')
              order by e.create_time desc) c
              LEFT JOIN
          (SELECT
              a.experience_id,COUNT(*) replyCount
              FROM reply a
              GROUP BY a.experience_id) d
          ON c.commId=d.experience_id
    </select>

    <select id="getListByTitle" resultMap="BaseResultMap">
         select * from experience
         where title like "%"#{title}"%"
    </select>

    <select id="getListByUserId" resultType="com.roc.vo.ExperienceVo">
        select
        e.experience_id as "commId",
        e.user_id as "userId",
        e.image,
        u.name,
        u.head_image as "headImage",
        e.title,
        e.content,
        e.like_num as "likeNum",
        e.unlike_num as "unlikeNum"
        from experience e
        left join sys_user u
        on e.user_id=u.user_id
        where e.user_id=#{userId}
        order by e.create_time desc
    </select>

    <select id="countTimeSlotRecords" resultType="java.util.Map">
        select
        DATE_FORMAT(e.create_time, '%Y-%m-%d') AS time,
        COUNT(1) AS total
        from experience e
        where
        <![CDATA[
        date_format(e.create_time, '%Y-%m-%d')>=#{startTime}
        and date_format(e.create_time, '%Y-%m-%d')<=#{endTime}
        ]]>
        group by date_format(e.create_time, '%Y-%m-%d')
    </select>

    <update id="updatePojo" parameterType="Experience">
        update experience set
        <choose>
            <when test="likeNum==1">
                like_num=like_num+1
            </when>
            <when test="likeNum==-1">
                like_num=if(like_num>0,like_num-1,like_num)
            </when>
            <when test="unlikeNum==1">
                unlike_num=unlike_num+1
            </when>
            <when test="unlikeNum==-1">
                unlike_num=if(unlike_num>0,unlike_num-1,unlike_num)
            </when>
        </choose>
        where experience_id=#{experienceId}
    </update>

    <update id="updateLikeNumOrHateNum">
        update experience set
        <choose>
            <when test="type==0">
                like_num=#{total}
            </when>
            <otherwise>
                unlike_num=#{total}
            </otherwise>
        </choose>
        where experience_id=#{id}
    </update>

    <delete id="deletePojo">
        delete from experience
        where experience_id=#{id}
    </delete>
</mapper>